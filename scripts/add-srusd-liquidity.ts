import { ethers } from 'hardhat'
import * as fs from 'fs'

async function main() {
  const [deployer] = await ethers.getSigners()

  console.log('‰ΩøÁî®Â∑≤ÈÉ®ÁΩ≤ÁöÑSRUSDÂàõÂª∫ÊµÅÂä®ÊÄßÊ±†')
  console.log('ÈÉ®ÁΩ≤ËÄÖÂú∞ÂùÄ:', deployer.address)
  console.log()

  const TEST_ADDRESS = '0x771Bd7b8Cd910333c3E8A4E2c463E73Bc57Ea207'

  // ÊóßRouterÁ≥ªÁªüÂú∞ÂùÄ
  const ROUTER_ADDRESS = '0x4D6aa9a7740a4DDD4dCC8EDB3F4f43B205daA652'
  const FACTORY_ADDRESS = '0xbA33Aa1E0f257e7a3b54c2862ac1684c2f3E8C29'
  const VOTER_ADDRESS = '0xda38EcEA1300ea3c229f5b068eFb3C09e78A995D'

  // SRUSDÂú∞ÂùÄÔºàÂ∑≤ÈÉ®ÁΩ≤Ôºâ
  const SRUSD_ADDRESS = '0x5f3347B3C43821D2783792395B9A4f44A28308A7'

  // Áé∞Êúâ‰ª£Â∏ÅÂú∞ÂùÄ
  const SRT = '0x4367741631B171d87f9d8a747636Fa3E3Bd048D8'
  const WSRT = '0x9799159b07f21106b6219B998184034C09e042ef'
  const STE = '0x8103319987b2ABB1F59F4b9c8aD20F70C9b64E8c'
  const STF = '0xB83da2B78d2C4734585b5167863881Dbf3Ea3cAb'
  const STCX = '0x4040a8cA682408c8cbD4Bb1bE9358409757b225C'
  const SBF = '0x048c72128d414e5FC9B3ab9853bb7457A046e365'

  // ========== Á¨¨‰∏ÄÊ≠•Ôºö‰ªéÊµãËØïÂú∞ÂùÄËΩ¨ÂõûSRUSDÁî®‰∫éÊµÅÂä®ÊÄß ==========
  console.log('üìù Á¨¨‰∏ÄÊ≠•Ôºö‰ªéÊµãËØïÂú∞ÂùÄËΩ¨ÂõûSRUSDÁî®‰∫éÊµÅÂä®ÊÄß')
  console.log('----------------------------------------')

  const SRUSD = await ethers.getContractAt(
    '@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20',
    SRUSD_ADDRESS
  )

  // ËÆ°ÁÆóÈúÄË¶ÅÁöÑSRUSDÊÄªÈáè
  const TOTAL_SRUSD_NEEDED = ethers.parseEther('16200000') // 1620‰∏á SRUSD
  console.log('ÈúÄË¶ÅÁöÑSRUSDÊÄªÈáè:', ethers.formatEther(TOTAL_SRUSD_NEEDED))

  // ÂÖàËΩ¨Ë¥¶Âà∞ÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑ÔºàÈúÄË¶Å‰ªéÊµãËØïÂú∞ÂùÄ‰ΩøÁî®impersonateÔºâ
  console.log('‚ö†Ô∏è  ÈúÄË¶ÅÊâãÂä®‰ªéÊµãËØïÂú∞ÂùÄËΩ¨Ë¥¶SRUSDÂà∞ÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑')
  console.log(`   ÊàñËÄÖÁõ¥Êé•ÈÄöËøáUIÊ∑ªÂä†ÊµÅÂä®ÊÄß`)
  console.log()

  // Ê£ÄÊü•ÈÉ®ÁΩ≤ËÄÖÁöÑÂêÑ‰ª£Â∏Å‰ΩôÈ¢ù
  console.log('üìä Ê£ÄÊü•ÈÉ®ÁΩ≤ËÄÖ‰ª£Â∏Å‰ΩôÈ¢ù:')
  const srtBalance = await ethers.getContractAt(
    '@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20',
    SRT
  ).then((t) => t.balanceOf(deployer.address))
  const wsrtBalance = await ethers.getContractAt(
    '@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20',
    WSRT
  ).then((t) => t.balanceOf(deployer.address))
  const srusdBalance = await SRUSD.balanceOf(deployer.address)

  console.log('  SRT:', ethers.formatEther(srtBalance))
  console.log('  WSRT:', ethers.formatEther(wsrtBalance))
  console.log('  SRUSD:', ethers.formatEther(srusdBalance))
  console.log()

  if (srusdBalance < TOTAL_SRUSD_NEEDED) {
    console.log('‚ùå ÈÉ®ÁΩ≤ËÄÖSRUSD‰ΩôÈ¢ù‰∏çË∂≥ÔºåÊó†Ê≥ïÊ∑ªÂä†ÊµÅÂä®ÊÄß')
    console.log('üí° Âª∫ËÆÆÔºö‰ªéÊµãËØïÂú∞ÂùÄËΩ¨Ë¥¶SRUSDÂà∞ÈÉ®ÁΩ≤ËÄÖÔºåÊàñÈÄöËøáUIÊâãÂä®Ê∑ªÂä†ÊµÅÂä®ÊÄß')
    return
  }

  // ========== Á¨¨‰∫åÊ≠•ÔºöÂàõÂª∫ÊµÅÂä®ÊÄßÊ±† ==========
  console.log('üìù Á¨¨‰∫åÊ≠•ÔºöÊ∑ªÂä†ÊµÅÂä®ÊÄßÊ±†')
  console.log('----------------------------------------')

  const Router = await ethers.getContractAt('Router', ROUTER_ADDRESS)
  const Factory = await ethers.getContractAt('Factory', FACTORY_ADDRESS)
  const Voter = await ethers.getContractAt('Voter', VOTER_ADDRESS)

  // ÂÆö‰πâÊµÅÂä®ÊÄßÊ±†ÈÖçÁΩÆ
  const liquidityPools = [
    {
      name: 'SRT/SRUSD',
      tokenA: SRT,
      tokenB: SRUSD_ADDRESS,
      stable: true,
      amountA: ethers.parseEther('10000000'), // 1000‰∏á SRT
      amountB: ethers.parseEther('10000000'), // 1000‰∏á SRUSD
    },
    {
      name: 'WSRT/SRUSD',
      tokenA: WSRT,
      tokenB: SRUSD_ADDRESS,
      stable: true,
      amountA: ethers.parseEther('5000000'), // 500‰∏á WSRT
      amountB: ethers.parseEther('5000000'), // 500‰∏á SRUSD
    },
    {
      name: 'STE/SRUSD',
      tokenA: STE,
      tokenB: SRUSD_ADDRESS,
      stable: false,
      amountA: ethers.parseEther('200000'), // 20‰∏á STE
      amountB: ethers.parseEther('100000'), // 10‰∏á SRUSD
    },
    {
      name: 'STF/SRUSD',
      tokenA: STF,
      tokenB: SRUSD_ADDRESS,
      stable: false,
      amountA: ethers.parseEther('300000'), // 30‰∏á STF
      amountB: ethers.parseEther('100000'), // 10‰∏á SRUSD
    },
  ]

  const createdPools: Array<{
    name: string
    address: string
    hasGauge: boolean
    gaugeAddress?: string
  }> = []

  for (const pool of liquidityPools) {
    console.log(`\nÂ§ÑÁêÜÊ±†Â≠ê: ${pool.name}`)

    try {
      // Ê£ÄÊü•Ê±†Â≠êÊòØÂê¶Â∑≤Â≠òÂú®
      const existingPair = await Factory.getPair(pool.tokenA, pool.tokenB, pool.stable)
      if (existingPair !== ethers.ZeroAddress) {
        console.log(`  ‚ö†Ô∏è  Ê±†Â≠êÂ∑≤Â≠òÂú®: ${existingPair}`)
        createdPools.push({
          name: pool.name,
          address: existingPair,
          hasGauge: false,
        })
        continue
      }

      // ÊéàÊùÉ‰ª£Â∏Å
      const tokenA = await ethers.getContractAt(
        '@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20',
        pool.tokenA
      )
      const tokenB = await ethers.getContractAt(
        '@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20',
        pool.tokenB
      )

      const allowanceA = await tokenA.allowance(deployer.address, ROUTER_ADDRESS)
      if (allowanceA < pool.amountA) {
        console.log('  üìù ÊéàÊùÉ Token A...')
        const tx = await tokenA.approve(ROUTER_ADDRESS, ethers.MaxUint256)
        await tx.wait()
      }

      const allowanceB = await tokenB.allowance(deployer.address, ROUTER_ADDRESS)
      if (allowanceB < pool.amountB) {
        console.log('  üìù ÊéàÊùÉ Token B...')
        const tx = await tokenB.approve(ROUTER_ADDRESS, ethers.MaxUint256)
        await tx.wait()
      }

      // Ê∑ªÂä†ÊµÅÂä®ÊÄß
      console.log('  üìù Ê∑ªÂä†ÊµÅÂä®ÊÄß...')
      const deadline = Math.floor(Date.now() / 1000) + 1200

      const tx = await Router.addLiquidity(
        pool.tokenA,
        pool.tokenB,
        pool.stable,
        pool.amountA,
        pool.amountB,
        0,
        0,
        deployer.address,
        deadline,
        { gasLimit: 5000000 }
      )

      console.log(`  ‚è≥ Á≠âÂæÖÁ°ÆËÆ§: ${tx.hash}`)
      const receipt = await tx.wait()

      if (receipt?.status === 1) {
        const pairAddress = await Factory.getPair(pool.tokenA, pool.tokenB, pool.stable)
        console.log(`  ‚úÖ ÊàêÂäü! Ê±†Â≠ê: ${pairAddress}`)
        createdPools.push({
          name: pool.name,
          address: pairAddress,
          hasGauge: false,
        })
      }
    } catch (error: any) {
      console.log(`  ‚ùå Â§±Ë¥•:`, error.message)
    }

    await new Promise((resolve) => setTimeout(resolve, 2000))
  }

  // ========== Á¨¨‰∏âÊ≠•ÔºöÂàõÂª∫Gauge ==========
  console.log('\n\nüìù Á¨¨‰∏âÊ≠•ÔºöÂàõÂª∫ Gauge')
  console.log('----------------------------------------')

  for (const pool of createdPools) {
    console.log(`\n${pool.name}`)
    try {
      const existingGauge = await Voter.gauges(pool.address)
      if (existingGauge && existingGauge !== ethers.ZeroAddress) {
        console.log(`  ‚úÖ Â∑≤ÊúâGauge: ${existingGauge}`)
        pool.hasGauge = true
        pool.gaugeAddress = existingGauge
        continue
      }

      console.log('  üìù ÂàõÂª∫ Gauge...')
      const tx = await Voter.createGauge(pool.address, { gasLimit: 3000000 })
      await tx.wait()

      const newGauge = await Voter.gauges(pool.address)
      console.log(`  ‚úÖ Gauge: ${newGauge}`)

      pool.hasGauge = true
      pool.gaugeAddress = newGauge
    } catch (error: any) {
      console.log(`  ‚ùå Â§±Ë¥•:`, error.message)
    }

    await new Promise((resolve) => setTimeout(resolve, 2000))
  }

  // ‰øùÂ≠òÁªìÊûú
  const result = {
    timestamp: new Date().toISOString(),
    srusd: SRUSD_ADDRESS,
    pools: createdPools,
  }

  fs.writeFileSync('./srusd-liquidity-result.json', JSON.stringify(result, null, 2))

  console.log('\n\nüìä ÂÆåÊàê')
  console.log('ÂàõÂª∫ÁöÑÊ±†Â≠ê:', createdPools.length)
  console.log('ÊúâGaugeÁöÑÊ±†Â≠ê:', createdPools.filter((p) => p.hasGauge).length)
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })
